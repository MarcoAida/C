/*
Scrivere un programma che riceve in ingresso:
- la dimensione n di una matrice (es: 6)
- la dimensione d della forma geometrica da disegnare (es: 3)
- un numero type compreso tra 0 e 2 inclusi (es: 1)

Il programma ritorna in uscita:

Se type=0: una matrice di zeri (0) con disegnato, a partire dalla cella (n-2,1), un quadrato di uni (1) di dimensione dxd
es:
   0 1 2 3 4 5
   
0  0 0 0 0 0 0 
1  0 0 0 0 0 0 
2  0 1 1 1 0 0 
3  0 1 1 1 0 0
4  0 1 1 1 0 0
5  0 0 0 0 0 0

Se type=1: una matrice di zeri (0) con disegnato, a partire dalla cella (n-2,1), un trianagolo rettangolo di uni (1) con cateti di dimensione d e angolo retto nella cella (n-2,1)
es:
   0 1 2 3 4 5 
   
0  0 0 0 0 0 0
1  0 0 0 0 0 0
2  0 1 0 0 0 0
3  0 1 1 0 0 0
4  0 1 1 1 0 0
5  0 0 0 0 0 0

Se type=2: una matrice di zeri (0) con disegnati, a partire dall'angolo in alto a sinistra (i.e., (0,0)), dei quadrati di dimensione dxd parzialmente sovrapposti fino a raggiungere l'angolo in basso a destra (i.e., (n-1,n-1)), dove il quadrato i-esimo e' spostato in basso ed a destra di i celle e contiene nelle sue celle il numero i:
es:
   0 1 2 3 4 5 
   
0  1 1 1 0 0 0
1  1 2 2 2 0 0
2  1 2 3 3 3 0
3  0 2 3 4 4 4
4  0 0 3 4 4 4
5  0 0 0 4 4 4 
*/

#include<stdio.h>

int main(){
  int n, d, type, i, j;

  // Acquisizione dati
  scanf("%d", &n);
  
  int m1[n][n];
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      m1[i][j]=0;
    }
  }
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      //printf("%d ",m1[i][j]);
    }  
    //printf("\n");
  }
  scanf("%d", &d);
  scanf("%d", &type);
  
  // Risposta type=0
  if(type==0){
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        if((i<(n-1) && j>0) && (i>n-1-d-1 && j<d+1)){
          m1[i][j]=1;
        }  
      }  
    }
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        printf("%d ",m1[i][j]);
      }  
      printf("\n");
    }
  }
  
  // Risposta type=1
  if(type==1){
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        if((i<(n-1) && j>0) && (i>n-1-d-1 && j<d+1) && (i>=(j-1)+(n-1-d))){
          m1[i][j]=1;
        }  
      }  
    }
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        printf("%d ",m1[i][j]);
      }  
      printf("\n");
    }
  }
  
  // Risposta type=2
  if(type==2){
    for(int nQ=1; nQ<=n-d+1; nQ++){
      for(i=0;i<n;i++){
        for(j=0;j<n;j++){
          if((i>=(nQ-1) && j>=(nQ-1)) && (i<(d+nQ-1) && j<(d+nQ-1))){
            m1[i][j]=nQ;
          }  
        }  
      } 
    }
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        printf("%d ",m1[i][j]);
      }  
      printf("\n");
    }
  }
}

/*
Test 1
n=6
d=3
type=0
result=
0 0 0 0 0 0 
0 0 0 0 0 0 
0 1 1 1 0 0 
0 1 1 1 0 0 
0 1 1 1 0 0 
0 0 0 0 0 0


Test 2
n=6
d=5
type=0
result=
0 1 1 1 1 1 
0 1 1 1 1 1 
0 1 1 1 1 1 
0 1 1 1 1 1 
0 1 1 1 1 1 
0 0 0 0 0 0

Test 3
n=7 
d=1
type=0
result=
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 1 0 0 0 0 0 
0 0 0 0 0 0 0

Test 4
n=4
d=2
type=0
result=
0 0 0 0 
0 1 1 0 
0 1 1 0 
0 0 0 0 


---

Test 5
n=6
d=4
type=1
result=
0 0 0 0 0 0 
0 1 0 0 0 0 
0 1 1 0 0 0 
0 1 1 1 0 0 
0 1 1 1 1 0 
0 0 0 0 0 0

Test 6
n=6
d=2
type=1
result=
Test 5
n=6
d=4
type=1
result=
0 0 0 0 0 0 
0 1 0 0 0 0 
0 1 1 0 0 0 
0 1 1 1 0 0 
0 1 1 1 1 0 
0 0 0 0 0 0

Test 7
n=4
d=3
type=1
result=
Test 5
n=6
d=4
type=1
result=
0 1 0 0 
0 1 1 0 
0 1 1 1 
0 0 0 0

Test 8
n=2
d=1
type=1
result=
Test 5
n=6
d=4
type=1
result=
0 1 
0 0



----

Test 9
n=6
d=3
type=2
result=
1 1 1 0 0 0 
1 2 2 2 0 0 
1 2 3 3 3 0 
0 2 3 4 4 4 
0 0 3 4 4 4 
0 0 0 4 4 4

Test 10
n=9
d=4
type=2
result=
1 1 1 1 0 0 0 0 0 
1 2 2 2 2 0 0 0 0 
1 2 3 3 3 3 0 0 0 
1 2 3 4 4 4 4 0 0 
0 2 3 4 5 5 5 5 0 
0 0 3 4 5 6 6 6 6 
0 0 0 4 5 6 6 6 6 
0 0 0 0 5 6 6 6 6 
0 0 0 0 0 6 6 6 6 

Test 11
n=4
d=2
type=2
result=
1 1 0 0 
1 2 2 0 
0 2 3 3 
0 0 3 3 

Test 12
n=2
d=1
type=2
result=
1 0 
0 2

Test 13
n=2
d=2
type=2
result=
1 1 
1 1 

Test 14
n=8
d=7
type=2
result=
1 1 1 1 1 1 1 0 
1 2 2 2 2 2 2 2 
1 2 2 2 2 2 2 2 
1 2 2 2 2 2 2 2 
1 2 2 2 2 2 2 2 
1 2 2 2 2 2 2 2 
1 2 2 2 2 2 2 2 
0 2 2 2 2 2 2 2 

*/


