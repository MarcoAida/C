/*
Scrivere un programma che riceve in ingresso:
- la dimensione n di una matrice, dove n e' un numero dispari (es: 5)
- gli elementi (per riga) di una matrice quadrata della dimensione precedentemente definita (es: 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
- un numero d compreso tra -(n-1) ed (n-1) inclusi (es: 3)
- un numero type compreso tra 0 e 2 inclusi (es: 1)

Il programma ritorna in uscita:

Se type=0: la somma degli elementi sulla diagonale principale (quella che va da sinistra verso destra) spostata a destra di d posizioni (se d<0 si sposta a sinistra, vedere figura A0)
 0 1 2 3 4 
-1 * * * * * 
-2 * * * * * 
-3 * * * * *
-4 * * * * *
   * * * * *

Se type=1: la somma degli elementi sul triangolo superiore alla diagonale principale (quella che va da sinistra verso destra) spostata a destra di d posizioni (se d<0 si sposta a sinistra). Diagonale esclusa. 

Se type=2: la somma degli elementi contenuti in tutti i triangoli disegnati in figura A2 (allegata). In questo caso la variabile d non e' utilizzata

*/

#include<stdio.h>

int main(){
  int n, d, type, i, j;

  // Acquisizione dati
  scanf("%d", &n);
  //printf("n=%d\n",n);
  
  int m1[n][n];
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      scanf("%d",&m1[i][j]);
    }
  }
  for(i=0;i<n;i++){
    for(j=0;j<n;j++){
      //printf("%d ",m1[i][j]);
    }  
    //printf("\n");
  }
  scanf("%d", &d);
  //printf("d=%d\n",d);
  scanf("%d", &type);
  //printf("type=%d\n",type);
  
  //printf("Risposta:\n");
  
  // Risposta type=0
  if(type==0){
    int sumDiag1=0;
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        if(i==(j-d)){ // Diag 1
        	//printf("In: %d, %d \n",i, j);
       	  sumDiag1+=m1[i][j];
        }  
      }  
    }
    printf("%d\n",sumDiag1);
  }
  
  // Risposta type=1
  if(type==1){
    int sumTri_1_sup=0;
    for(i=0;i<n;i++){
      for(j=0;j<n;j++){
        if(i<(j-d)){ // Tri 1 sup
      	  //printf("In: %d, %d \n",i, j);
      	  sumTri_1_sup+=m1[i][j];
        }
      }  
    }
    printf("%d\n",sumTri_1_sup);
  }
  
  // Risposta type=2 (test possibili: 1 triangolo, piu triangoli)
  if(type==2){
    int sumAllTri=0;
    int nTri=n-n/2;
    int currTree;
    for(int t=0; t<nTri; t++){
      currTree=0;
      for(i=0;i<n;i++){
        for(j=0;j<n;j++){
          if( (j>=t) & (j<(n/2+1+t)) & ( ((i<(n/2+1)) & (j>n-nTri-1+t-i)) | (i>(n/2)) & (j>i-n/2-1+t))  ){
            //printf("%d, ",m1[i][j]);
            currTree+=m1[i][j];
          }
        }
      }
      //printf("\n");
      sumAllTri+=currTree;
      //printf("currTree: %d\n",currTree);
    }
    printf("%d\n",sumAllTri);
  } 
}

/*
Test 1
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1 1 2 3 4 5
d=1
type=0
result=18

Test 2
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 1 3 5 7 9 2 4 6 8 0 6 7 8 9 0
d=-1
type=0
result=24

Test 3
n=3, 
val= 10 30 50 70 90 80 60 40 12
d=0
type=0
result=112

Test 4
n=3, 
val= 1 1 2 3 5 8 13 21 34
d=2
type=0
result=2

---

Test 5
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1 1 2 3 4 5
d=1
type=1
result=27

Test 6
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 1 3 5 7 9 2 4 6 8 0 6 7 8 9 0
d=-1
type=1
result=68

Test 7
n=3, 
val= 10 30 50 70 90 80 60 40 12
d=0
type=1
result=160

Test 8
n=3 
val= 1 1 2 3 5 8 13 21 34
d=2
type=1
result=0

---

Test 9
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1 1 2 3 4 5
d=1
type=2
result=142

Test 10
n=5, 
val= 1 2 3 4 5 6 7 8 9 0 1 3 5 7 9 2 4 6 8 0 6 7 8 9 0
d=-1
type=2
result=147

Test 11
n=3, 
val= 10 30 50 70 90 80 60 40 12
d=0
type=2
result=462

Test 12
n=3 
val= 1 1 2 3 5 8 13 21 34
d=2
type=2
result=79

*/


