#include <stdio.h>
#include <stdlib.h> // malloc(), free(), exit()

#define MAX_LENGTH 80
#define STRING_START 0
#define STRING_END -1

/**
 * Implementare una stringa come lista di caratteri,
 * completando tutte le funzioni dichiarate ma non definite nel programma.
 * produce il seguente output:
 * Hello World!
 * World!
 */
struct node_t {
  char data;
  struct node_t *next;
};

void check_alloc(struct node_t *p);
struct node_t *make_string(char *s);
void print_string(struct node_t *head, int start, int end);
void free_string(struct node_t *head);

int main() {
  char s[MAX_LENGTH + 1];
  scanf("%[^\n]80s", s);
  struct node_t *s1 = make_string(s);
  print_string(s1, STRING_START, STRING_END);
  printf("\n");
  print_string(s1, 6, STRING_END);
  printf("\n");
  print_string(s1, 6, 10);
  printf("\n");

  free_string(s1);
  return 0;
}

/**
 * Controlla se un puntatore è valido, se non è così
 * stampa la stringa "Errore nell'allocazione della memoria.\n" ed esce con
 * exit(-1).
 */
void check_alloc(struct node_t *p) {
  if (p == NULL) {
    printf("Errore nell'allocazione della memoria.\n");
    exit(-1);
  }
}

/**
 * Crea una lista concatenata di nodi di tipo node_t
 * a partire dalla stringa s.
 * Se la stringa s è vuota, ritorna NULL.
 */
struct node_t *make_string(char *s) {
  struct node_t *head = NULL;
  struct node_t *curr;
  struct node_t *prec;

  while (*s) {
    curr = (struct node_t *)malloc(sizeof(struct node_t));
    check_alloc(curr);
    curr->data = *s;
    curr->next = NULL;
    if (head == NULL)
      head = curr;
    else {
      prec->next = curr;
    }
    prec = curr;
    s++;
  }
  return head;
}

/**
 * Stampa i caratteri di una lista concatenta dall'indice start all'indice end
 * inclusi. Se end è STRING_END, stampa i carattteri fino alla fine della lista.
 * Si ipotizza che start sia maggiore e uguale a zero e end sia maggiore di zero
 * oppure sia STRING_END.
 */
void print_string(struct node_t *head, int start, int end) {
  int pos = 0;
  while (head != NULL) {
    if (pos >= start && (pos <= end || end == STRING_END))
      printf("%c", head->data);
    head = head->next;
    pos++;
  }
}

/**
 * Libera la memoria della lista concatenata che inizia con head.
 */
void free_string(struct node_t *head) {
  struct node_t *tmp;
  while (head != NULL) {
    tmp = head;
    head = head->next;
    free(tmp);
  }
}
