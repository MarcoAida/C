/*
 * Completare la definizione delle funzioni presenti nel programma.
 * Data una stringa, che si suppone non vuota e che contiene le lettere A, C, G e T,
 * il programma richiama la funzione string_to_list(), che restituisce una lista che rappresenta la stringa e
 * la funzione di stampa della lista print_list(), che stampa le sequenze di lettere uguali separate da uno spazio.
 * I nodi della lista contengono una lettera e il numero di volte che appaiono consecutivamente nella stringa di partenza.
 *
 * Per esempio, se la sequenza Ã¨ "AAAAGGCCCCAAATTTTTGGG", il programma stampa:
 * AAAA GG CCCC AAA TTTTT GGG
 */
#include <stdio.h>
#include <stdlib.h>

#define MAX_LENGTH 80

struct node_t {
    char c;
    int count;
    struct node_t *next;
};

struct node_t *string_to_list();
void print_list(struct node_t *head);
struct node_t *insert_on_tail(struct node_t *head, char c, int value);

int main() {
    char s[MAX_LENGTH + 1];
    scanf("%80s", s);

    struct node_t *head = string_to_list(s);
    print_list(head);
    return 0;
}

struct node_t *string_to_list(char *s) {
    char c;
    char current_char = '\0';
    int index = 0;
    int count;
    struct node_t *head = NULL;

    while ((c = s[index]) != '\0') {
        if (c != current_char) {
            if (count > 0) {
                head = insert_on_tail(head, current_char, count);
                count = 0;
            }
            current_char = c;
            count = 1;
        } else {
            count++;
        }
        index++;
    }
    if (count > 0) {
        head = insert_on_tail(head, current_char, count);
    }
    return head;
}

struct node_t *insert_on_tail(struct node_t *head, char c, int value) {
    struct node_t *node = (struct node_t *)malloc(sizeof(struct node_t));
    node->c = c;
    node->count = value;
    node->next = NULL;

    if (head == NULL) {
        head = node;
    } else {
        struct node_t *current = head;

        while (current->next != NULL) {
            current = current->next;
        }
        current->next = node;
    }
    return head;
}

void print_list(struct node_t *head) {
    struct node_t *current = head;

    while (current != NULL) {
        for (int i = 0; i < current->count; i++) {
            printf("%c", current->c);
        }
        printf(" ");
        current = current->next;
    }
    printf("\n");
}
