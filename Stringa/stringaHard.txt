#include <stdio.h>
#include <string.h>

/*Si consideri un alfabeto di quattro simboli, dato dai caratteri A,C,G e T.
Si scriva un programma C composto da:
 Una funzione leggi() che richiede all’utente di inserire 10 caratteri e li
memorizza in un array. I caratteri validi sono solo quelli dell’alfabeto
descritto sopra.
 Una funzione matricefrequenze() che conta il numero di volte
che ogni simbolo dell’alfabeto `e succeduto da ogni simbolo dell’alfabeto, e
mette i risultati in una matrice 4 × 4 (si veda l’esempio).
 Una funzione max() che prende in input la matrice e restituisce il valore
massimo contenuto nella matrice.
 Una funzione min() che prende in input la matrice e restituisce il valore
minimo contenuto nella matrice.  Una funzione media() che prende in input la
matrice e restituisce la media dei valore della matrice.  Una funzione
vettore() che prende in input la matrice e restituisce un array monodimensionale
contenente tutti i valori della matrice ordinati in ordine crescente.  Una
funzione main che richiama le altre funzioni e stampa i risultati ottenuti.
Esempio Data la sequenza ACGT T GCACA. La matrice ottenuta da matrice frequenze
e': (A C G T) A [0,2,0,0] C [2,0,1,0] G [0,1,0,1] T [0,0,1,1] e il
corrispondente array ottenuto dalla funzione vettore `e
[0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2]
*/

#define dim 4
#define len 10

int codice(char c);
void leggi(char array[len]);
void matricefrequenze(char array[len], int matrice[dim][dim]);
int maxi(int matrice[dim][dim]);
int mini(int matrice[dim][dim]);
float media(int matrice[dim][dim]);
void vettore(int matrice[dim][dim], int array[len]);
void swap(int array[], int i, int j);

int main(void) {
  int i, j;

  // char array[len];
  char array[len] = "ACGTTGCACA";
  int matrice[dim][dim] = {0};
  int vettore_ordinato[len];

  // leggi(array);

  matricefrequenze(array, matrice);

  printf("La matrice frequenze e':\n");
  printf(" A C G T\n");
  for (i = 0; i < dim; i++) {
    printf("[");
    for (j = 0; j < dim; j++) {
      printf("%d ", matrice[i][j]);
    }
    printf("]");
    printf("\n");
  }

  printf("Il massimo e' %d \n", maxi(matrice));
  printf("Il minimo e' %d \n", mini(matrice));
  printf("La media e' %f \n", media(matrice));

  printf("Il vettore ordinato e': ");
  printf("[");
  vettore(matrice, vettore_ordinato);
  for (i = 0; i < (dim * dim); i++) {
    printf("%d ", vettore_ordinato[i]);
  }
  printf("]");
  printf("\n");

  return 0;
}

/* Ritorna un codice numerico in [0,3] per i simboli dell'alfabeto in input.
 * Ritorna -1 se il carattere non e' valido.
 */
int codice(char c) {
  switch (c) {
  case 'a':
  case 'A':
    return 0;
    break;
  case 'c':
  case 'C':
    return 1;
    break;
  case 'g':
  case 'G':
    return 2;
    break;
  case 't':
  case 'T':
    return 3;
    break;
  default:
    return -1;
  }
}

void leggi(char array[]) {
  printf("Inserisci 10 caratteri dell'alfabeto {A,C,G,T}\n");
  int i;
  char c;

  for (i = 0; i < len; i++) {
    scanf(" %c", &c);
    if (codice(c) < 0) {
      printf("Carattere non valido\n");
    } else {
      array[i] = c;
      i++;
    }
  }
}

void matricefrequenze(char array[], int matrice[][dim]) {
  int i;
  for (i = 0; i < dim; i++) {
    matrice[codice(array[i])][codice(array[i + 1])]++;
  }
}

int maxi(int matrice[dim][dim]) {
  int i, j;
  int max = matrice[0][0];

  for (i = 0; i < dim; i++) {
    for (j = 0; j < dim; j++) {
      if (matrice[i][j] > max)
        max = matrice[i][j];
    }
  }
  return max;
}

int mini(int matrice[dim][dim]) {
  int i, j;
  int min = matrice[0][0];

  for (i = 0; i < dim; i++) {
    for (j = 0; j < dim; j++) {
      if (matrice[i][j] < min)
        min = matrice[i][j];
    }
  }
  return min;
}

float media(int matrice[dim][dim]) {
  int i, j;
  float avg = 0.0;

  for (i = 0; i < dim; i++) {
    for (j = 0; j < dim; j++) {
      if (matrice[i][j] < avg)
        avg += matrice[i][j];
    }
  }
  // avg = avg / (dim * dim);
  return avg / (dim * dim);
}

void vettore(int matrice[dim][dim], int array[]) {
  int i, j;
  for (i = 0; i < dim; i++) {
    for (j = 0; j < dim; j++) {
      array[(i * dim) + j] = matrice[i][j];
    }
  }

  // vettore ordinato
  for (i = 0; i < (dim * dim); i++) {
    for (j = i + 1; j < (dim * dim); j++) {
      if (array[j] < array[i])
        swap(array, i, j);
    }
  }
}

void swap(int array[], int i, int j) {
  int temp = array[i];
  array[i] = array[j];
  array[j] = temp;
}